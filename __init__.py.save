"""The MaxSmart integration."""
import logging

from homeassistant.helpers import config_entry_flow
from homeassistant.config_entries import ConfigEntry
from homeassistant.core import HomeAssistant

from .config_flow import MaxSmartConfigFlow

DOMAIN = "maxsmart"

_LOGGER = logging.getLogger(__name__)

async def async_setup(hass, config):
    """Set up the MaxSmart component."""
    return True

async def async_setup_entry(hass, entry):
    """Set up MaxSmart from a config entry."""
    """Set up MaxSmart from a config entry."""
    ip = entry.data.get("ip")
    serial_number = entry.data.get("serial_number")
    name = entry.data.get("name")
    port_names = entry.data.get("port_names")

    # Create the "port 0" entity for all ports
    unique_id_all = f"{serial_number}_0"
    device_name_all = f"{name} - All ports"
    # Create and add the switch entity for all ports to Home Assistant
    hass.async_create_task(
        hass.config_entries.async_forward_entry_setup(entry, "switch", {"name": device_name_all, "unique_id": unique_id_all})
    )

    # Create the switch entities for each individual port
    for i, port_name in enumerate(port_names, start=1):
        unique_id = f"{serial_number}_{i}"
        device_name = f"{name} - {port_name}"
        # Create and add the switch entity to Home Assistant
        hass.async_create_task(
            hass.config_entries.async_forward_entry_setup(entry, "switch", {"name": device_name, "unique_id": unique_id})
        )
	# Create the sensor entities for each individual port
	for i, port_name in enumerate(port_names, start=1):
	    unique_id = f"{serial_number}_sensor_{i}"
	    device_name = f"{name} - {port_name} Sensor"
	    # Create and add the sensor entity to Home Assistant
	    hass.async_create_task(
	        hass.config_entries.async_forward_entry_setup(entry, "sensor", {"name": device_name, "unique_id": unique_id})
	    )
    return True

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    # Perform cleanup and removal of entities associated with the entry
    await hass.config_entries.async_forward_entry_unload(entry, "switch")
    await hass.config_entries.async_forward_entry_unload(entry, "sensor")

    return True

async def async_remove_entry(hass: HomeAssistant, entry: ConfigEntry) -> None:
    """Remove a config entry."""
    # Perform additional cleanup if needed

config_entry_flow.register_discovery_flow(DOMAIN, "MaxSmart", MaxSmartConfigFlow, allow_multiple_entries=True)
